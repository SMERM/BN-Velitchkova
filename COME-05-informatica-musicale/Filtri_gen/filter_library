//=====================================
//=====================================
// FILTER LIBRARY
// by Gabriela Krassimirova Velitchkova
// 2020
//=====================================
//=====================================
//               CONTENT
//=====================================
//=====================================
// 1. ALLPASS
//  1.1 ALLPASS (sig, delTime, T60)
//  1.2 ALLPASS (sig, delTime, gain)
//  1.2 ALLPASS (sig, delTime, samples)
//=====================================
//=====================================
// 2. LOWPASS_COMB FILTERS
//  2.1 LOWPASS_COMB (signal, delay, T60, fcut)
//  2.2 LOWPASS_COMB (sig, delT
//=====================================
//=====================================
//
//
//=====================================
//=====================================
//            1. ALLPASS
//=====================================
//=====================================
//  1.1 ALLPASS (sig, delTime, T60)
//=====================================
//=====================================

del1 = ms * (samplerate / 1000);
potenza = ((-3 * (del1 / 1000))) / T60;
g = pow(10, potenza);

gkv_allpass(sig, delTime, T60)
{
Delay zeta(samplerate);
Xn= sig;
deltime= delTime*(samplerate/1000);
espo=  (-3*(delTime*1000))/T60;
g= pow(10, espo);
menog= -1*g;

del1= zeta.read(deltime);
feedback= del1*menog;
sum1=feedback+Xn;
mul1= sum1*g;
Yn= del1+mul1;
zeta.write(sum1);

  return Yn;
}
//=====================================
//=====================================
//  1.2 ALLPASS (sig, delTime, gain)
//=====================================
//=====================================
gkv_allpass_g(sig, delTime, gain)
{
Delay zeta(samplerate);
Xn= sig;
deltime = delTime*(samplerate/1000.);
g= clamp(gain, 0., 0.999);
menog= -1*g;


del1= zeta.read(del_Time);
feedback= del1*menog;
sum1=feedback+Xn;
mul1= sum1*g;
Yn= del1+mul1;
zeta.write(sum1);
	//out1= Yn;
  return Yn;
}
//=====================================
//=====================================
// COMB FILTER
//=====================================
//=====================================
Combfilter (sig, ms, T60, lpcut, lpg, allcut)

{

Delay delay_1(samplerate);
History history_2(0);
Delay delay_3(samplerate);

// LOWPASS
omega = ((lpcut*twopi))/samplerate;
cosw = cos(omega);
cosq = cosw*cosw;
//=================

alpha = (cosw-1)+(sqrt((cosq-(4*cosw))+3));
expr_4 = alpha;

mul_5 = history_2 * lpg;
mul_6 = history_2 * -1;

del1 = ms * (samplerate / 1000);
potenza = ((-3 * (del1 / 1000))) / T60;
g = pow(10, potenza);

// COMB
tap_7 = delay_1.read(del1);
mul_8 = tap_7 * g;


add_9 = sig + mul_8;
expr_10 = add_9;
add_11 = add_9 + mul_6;
mul_12 = add_11 * expr_4;
add_13 = mul_12 + mul_5;

history_2_next_14 = fixdenorm(add_13);
delay_1.write(add_13);
history_2 = history_2_next_14;
del2 = allcut * (samplerate / 1000);
tap_15 = delay_3.read(del2);
mul_6 = tap_15 * 0.9999;
rsub_16 = 0 - mul_6;
add_9 = sig + rsub_16;
mul_5 = add_9 * 0.9999;
add_17 = tap_15 + mul_5;
add_18 = expr_10 + add_17;

delay_3.write(add_9);

    return add_18;

}
